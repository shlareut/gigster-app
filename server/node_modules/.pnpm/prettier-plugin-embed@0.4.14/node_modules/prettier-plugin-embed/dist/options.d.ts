import { type EmbeddedComment, type EmbeddedTag } from "./embedded/index.js";
type EmbeddedCommentsOrTags = (EmbeddedComment | EmbeddedTag)[];
declare const NO_EMBEDDED_IDENTIFICATION_BY_COMMENT = "noEmbeddedIdentificationByComment";
declare const NO_EMBEDDED_IDENTIFICATION_BY_TAG = "noEmbeddedIdentificationByTag";
declare const PRESERVE_EMBEDDED_EXTERIOR_WHITESPACES = "preserveEmbeddedExteriorWhitespaces";
declare const NO_EMBEDDED_MULTI_LINE_INDENTATION = "noEmbeddedMultiLineIndentation";
declare const EMBEDDED_OVERRIDES = "embeddedOverrides";
export declare const options: {
    /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    readonly noEmbeddedIdentificationByComment: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Turns off `` /* comment */ `...` `` comment-based embedded language identification for the specified identifiers.";
        readonly deprecated: "Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.";
    };
    /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    readonly noEmbeddedIdentificationByTag: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Turns off `` tag`...` `` tag-based embedded language identification for the specified identifiers.";
        readonly deprecated: "Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.";
    };
    readonly preserveEmbeddedExteriorWhitespaces: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Preserves leading and trailing whitespaces in the formatting results for the specified comments or tags.";
    };
    readonly noEmbeddedMultiLineIndentation: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Turns off auto indentation in the formatting results for the specified comments or tags when they are formatted to span multi lines.";
    };
    readonly embeddedOverrides: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: false;
        readonly default: undefined;
        readonly description: "Option overrides for the specified comments or tags. It should either be a stringified JSON or an absolute filepath to the option overrides file.";
    };
    readonly embeddedNoopIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tag or comment identifiers that prevent their subsequent template literals from being identified as embedded languages and thus from being formatted.";
        readonly deprecated: "Please use `embeddedNoopComments` or `embeddedNoopTags`.";
    };
    readonly embeddedNoopComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that prevent their subsequent template literals from being identified as embedded languages and thus from being formatted.";
    };
    readonly embeddedNoopTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that prevent their subsequent template literals from being identified as embedded languages and thus from being formatted.";
    };
    readonly embeddedCssIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["css"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded CSS language.";
        readonly deprecated: "Please use `embeddedCssComments` or `embeddedCssTags`.";
    };
    readonly embeddedCssComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded CSS language.";
    };
    readonly embeddedCssTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded CSS language.";
    };
    readonly embeddedCssParser: {
        category: string;
        type: "choice";
        default: "scss";
        description: string;
        choices: {
            value: "css" | "less" | "scss";
            description: string;
        }[];
    };
    readonly embeddedEsIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["js", "jsx", "es", "es6", "mjs", "cjs", "pac", "javascript"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded ECMAScript/JavaScript language.";
        readonly deprecated: "Please use `embeddedEsComments` or `embeddedEsTags`.";
    };
    readonly embeddedEsComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded ECMAScript/JavaScript language.";
    };
    readonly embeddedEsTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded ECMAScript/JavaScript language.";
    };
    readonly embeddedEsParser: {
        category: string;
        type: "choice";
        default: "babel";
        description: string;
        choices: {
            value: "babel" | "babel-flow" | "acorn" | "espree" | "flow" | "meriyah";
            description: string;
        }[];
    };
    readonly embeddedGlslIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["glsl", "shader"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded GLSL language. This option requires the `prettier-plugin-glsl` plugin.";
        readonly deprecated: "Please use `embeddedGlslComments` or `embeddedGlslTags`.";
    };
    readonly embeddedGlslComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded GLSL language. This option requires the `prettier-plugin-glsl` plugin.";
    };
    readonly embeddedGlslTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded GLSL language. This option requires the `prettier-plugin-glsl` plugin.";
    };
    readonly embeddedGraphqlIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["graphql", "gql"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded GraphQL language.";
        readonly deprecated: "Please use `embeddedGraphqlComments` or `embeddedGraphqlTags`.";
    };
    readonly embeddedGraphqlComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded GraphQL language.";
    };
    readonly embeddedGraphqlTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded GraphQL language.";
    };
    readonly embeddedHtmlIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["html", "xhtml"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded HTML language.";
        readonly deprecated: "Please use `embeddedHtmlComments` or `embeddedHtmlTags`.";
    };
    readonly embeddedHtmlComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded HTML language.";
    };
    readonly embeddedHtmlTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded HTML language.";
    };
    readonly embeddedHtmlParser: {
        category: string;
        type: "choice";
        default: "html";
        description: string;
        choices: {
            value: "html" | "vue" | "angular" | "lwc";
            description: string;
        }[];
    };
    readonly embeddedIniIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["ini", "cfg", "pro"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded INI language. This option requires the `prettier-plugin-ini` plugin.";
        readonly deprecated: "Please use `embeddedIniComments` or `embeddedIniTags`.";
    };
    readonly embeddedIniComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded INI language. This option requires the `prettier-plugin-ini` plugin.";
    };
    readonly embeddedIniTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded INI language. This option requires the `prettier-plugin-ini` plugin.";
    };
    readonly embeddedJavaIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["java"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Java language. This option requires the `prettier-plugin-java` plugin.";
        readonly deprecated: "Please use `embeddedJavaComments` or `embeddedJavaTags`.";
    };
    readonly embeddedJavaComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Java language. This option requires the `prettier-plugin-java` plugin.";
    };
    readonly embeddedJavaTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Java language. This option requires the `prettier-plugin-java` plugin.";
    };
    readonly embeddedJsonIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["json", "jsonl"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded JSON language.";
        readonly deprecated: "Please use `embeddedJsonComments` or `embeddedJsonTags`.";
    };
    readonly embeddedJsonComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded JSON language.";
    };
    readonly embeddedJsonTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded JSON language.";
    };
    readonly embeddedJsonParser: {
        category: string;
        type: "choice";
        default: "json";
        description: string;
        choices: {
            value: "json" | "json5" | "jsonc" | "json-stringify";
            description: string;
        }[];
    };
    readonly embeddedJsonataIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["jsonata"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded JSONata language. This option requires the `@stedi/prettier-plugin-jsonata` plugin.";
        readonly deprecated: "Please use `embeddedJsonataComments` or `embeddedJsonataTags`.";
    };
    /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    readonly embeddedJsonataComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded JSONata language. This option requires the `@stedi/prettier-plugin-jsonata` plugin.";
    };
    readonly embeddedJsonataTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded JSONata language. This option requires the `@stedi/prettier-plugin-jsonata` plugin.";
    };
    readonly embeddedLatexIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["latex", "tex", "aux", "cls", "bbl", "bib", "toc", "sty"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded LaTeX language. This option requires the `prettier-plugin-latex` plugin.";
        readonly deprecated: "Please use `embeddedLatexComments` or `embeddedLatexTags`.";
    };
    readonly embeddedLatexComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded LaTeX language. This option requires the `prettier-plugin-latex` plugin.";
    };
    readonly embeddedLatexTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded LaTeX language. This option requires the `prettier-plugin-latex` plugin.";
    };
    readonly embeddedMarkdownIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["md", "markdown"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Markdown language.";
        readonly deprecated: "Please use `embeddedMarkdownComments` or `embeddedMarkdownTags`.";
    };
    readonly embeddedMarkdownComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Markdown language.";
    };
    readonly embeddedMarkdownTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Markdown language.";
    };
    readonly embeddedMarkdownParser: {
        category: string;
        type: "choice";
        default: "markdown";
        description: string;
        choices: {
            value: "markdown" | "mdx" | "remark";
            description: string;
        }[];
    };
    readonly embeddedNginxIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["nginx"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded NGINX language. This option requires the `prettier-plugin-nginx` plugin.";
        readonly deprecated: "Please use `embeddedNginxComments` or `embeddedNginxTags`.";
    };
    readonly embeddedNginxComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded NGINX language. This option requires the `prettier-plugin-nginx` plugin.";
    };
    readonly embeddedNginxTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded NGINX language. This option requires the `prettier-plugin-nginx` plugin.";
    };
    readonly embeddedPegjsIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["pegjs", "peggy", "peg"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Pegjs language. This option requires the `prettier-plugin-pegjs` plugin.";
        readonly deprecated: "Please use `embeddedPegjsComments` or `embeddedPegjsTags`.";
    }; /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    readonly embeddedPegjsComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Pegjs language. This option requires the `prettier-plugin-pegjs` plugin.";
    };
    readonly embeddedPegjsTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Pegjs language. This option requires the `prettier-plugin-pegjs` plugin.";
    };
    readonly embeddedTsIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["ts", "tsx", "cts", "mts", "typescript"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded TypeScript language.";
        readonly deprecated: "Please use `embeddedTsComments` or `embeddedTsTags`.";
    };
    readonly embeddedTsComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded TypeScript language.";
    };
    readonly embeddedTsTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded TypeScript language.";
    };
    readonly embeddedTsParser: {
        category: string;
        type: "choice";
        default: "typescript";
        description: string;
        choices: {
            value: "typescript" | "babel-ts";
            description: string;
        }[];
    };
    readonly embeddedPhpIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["php", "php5"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded PHP language. This option requires the `@prettier/plugin-php` plugin.";
        readonly deprecated: "Please use `embeddedPhpComments` or `embeddedPhpTags`.";
    };
    readonly embeddedPhpComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded PHP language. This option requires the `@prettier/plugin-php` plugin.";
    };
    readonly embeddedPhpTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded PHP language. This option requires the `@prettier/plugin-php` plugin.";
    };
    readonly embeddedPrismaIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["prisma"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Prisma language. This option requires the `prettier-plugin-prisma` plugin.";
        readonly deprecated: "Please use `embeddedPrismaComments` or `embeddedPrismaTags`.";
    };
    readonly embeddedPrismaComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Prisma language. This option requires the `prettier-plugin-prisma` plugin.";
    };
    readonly embeddedPrismaTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Prisma language. This option requires the `prettier-plugin-prisma` plugin.";
    };
    readonly embeddedPropertiesIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["properties"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Properties language. This option requires the `prettier-plugin-properties` plugin.";
        readonly deprecated: "Please use `embeddedPropertiesComments` or `embeddedPropertiesTags`.";
    }; /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    readonly embeddedPropertiesComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Properties language. This option requires the `prettier-plugin-properties` plugin.";
    };
    readonly embeddedPropertiesTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Properties language. This option requires the `prettier-plugin-properties` plugin.";
    };
    readonly embeddedPugIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["pug", "jade"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Pug language. This option requires the `@prettier/plugin-pug` plugin.";
        readonly deprecated: "Please use `embeddedPugComments` or `embeddedPugTags`.";
    };
    readonly embeddedPugComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Pug language. This option requires the `@prettier/plugin-pug` plugin.";
    };
    readonly embeddedPugTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Pug language. This option requires the `@prettier/plugin-pug` plugin.";
    };
    readonly embeddedRubyIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["ruby"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Ruby language. This option requires the `@prettier/plugin-ruby` plugin.";
        readonly deprecated: "Please use `embeddedRubyComments` or `embeddedRubyTags`.";
    };
    readonly embeddedRubyComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Ruby language. This option requires the `@prettier/plugin-ruby` plugin.";
    };
    readonly embeddedRubyTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Ruby language. This option requires the `@prettier/plugin-ruby` plugin.";
    };
    readonly embeddedRubyParser: {
        category: string;
        type: "choice";
        default: "ruby";
        description: string;
        choices: {
            value: "ruby" | "rbs" | "haml";
            description: string;
        }[];
    };
    readonly embeddedShIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["sh"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded Shell language. This option requires the `prettier-plugin-sh` plugin.";
        readonly deprecated: "Please use `embeddedShComments` or `embeddedShTags`.";
    };
    readonly embeddedShComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded Shell language. This option requires the `prettier-plugin-sh` plugin.";
    };
    readonly embeddedShTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded Shell language. This option requires the `prettier-plugin-sh` plugin.";
    };
    readonly embeddedSqlIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["sql"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded SQL language. This option requires the `prettier-plugin-sql` plugin or the `prettier-plugin-sql-cst` plugin.";
        readonly deprecated: "Please use `embeddedSqlComments` or `embeddedSqlTags`.";
    };
    readonly embeddedSqlComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded SQL language. This option requires the `prettier-plugin-sql` plugin or the `prettier-plugin-sql-cst` plugin.";
    };
    readonly embeddedSqlTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded SQL language. This option requires the `prettier-plugin-sql` plugin or the `prettier-plugin-sql-cst` plugin.";
    };
    readonly embeddedSqlPlugin: {
        category: string;
        type: "choice";
        default: "prettier-plugin-sql";
        description: string;
        choices: {
            value: "prettier-plugin-sql" | "prettier-plugin-sql-cst";
            description: string;
        }[];
    };
    readonly embeddedSqlParser: {
        category: string;
        type: "choice";
        default: "sqlite";
        description: string;
        choices: {
            value: "bigquery" | "mariadb" | "mysql" | "postgresql" | "sqlite";
            description: string;
        }[];
    };
    readonly embeddedTomlIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["toml"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded TOML language. This option requires the `prettier-plugin-toml` plugin.";
        readonly deprecated: "Please use `embeddedTomlComments` or `embeddedTomlTags`.";
    };
    readonly embeddedTomlComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded TOML language. This option requires the `prettier-plugin-toml` plugin.";
    };
    readonly embeddedTomlTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded TOML language. This option requires the `prettier-plugin-toml` plugin.";
    };
    readonly embeddedXmlIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["xml", "opml", "rss", "svg"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded XML language. This option requires the `@prettier/plugin-xml` plugin.";
        readonly deprecated: "Please use `embeddedXmlComments` or `embeddedXmlTags`.";
    }; /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    readonly embeddedXmlComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded XML language. This option requires the `@prettier/plugin-xml` plugin.";
    };
    readonly embeddedXmlTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded XML language. This option requires the `@prettier/plugin-xml` plugin.";
    };
    readonly __embeddedXmlFragmentRecoverIndex: {
        readonly category: "Embed";
        readonly type: "int";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "This option is read only and is used internally as a workaround to support xml fragments";
    };
    readonly embeddedYamlIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["yaml", "yml"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded YAML language.";
        readonly deprecated: "Please use `embeddedYamlComments` or `embeddedYamlTags`.";
    };
    readonly embeddedYamlComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded YAML language.";
    };
    readonly embeddedYamlTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded YAML language.";
    };
};
export interface PluginEmbedLanguageAgnosticOptions {
    /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    [NO_EMBEDDED_IDENTIFICATION_BY_COMMENT]?: EmbeddedCommentsOrTags;
    /**
     * @deprecated Please use `embedded<Language>Comments` or `embedded<Language>Tags` to configure each embedded language, and you won't need this option anymore.
     */
    [NO_EMBEDDED_IDENTIFICATION_BY_TAG]?: EmbeddedCommentsOrTags;
    [PRESERVE_EMBEDDED_EXTERIOR_WHITESPACES]?: EmbeddedCommentsOrTags;
    [NO_EMBEDDED_MULTI_LINE_INDENTATION]?: EmbeddedCommentsOrTags;
    [EMBEDDED_OVERRIDES]?: string;
}
declare module "./embedded/types.js" {
    interface PluginEmbedOptions extends PluginEmbedLanguageAgnosticOptions {
    }
}
export {};
