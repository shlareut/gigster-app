import { type AutocompleteStringList, type StringListToInterfaceKey } from "../utils.js";
declare const DEFAULT_COMMENTS: readonly ["nginx"];
type Comments = AutocompleteStringList<(typeof DEFAULT_COMMENTS)[number]>;
type DefaultCommentsHolder = StringListToInterfaceKey<typeof DEFAULT_COMMENTS>;
declare const DEFAULT_TAGS: readonly ["nginx"];
type Tags = AutocompleteStringList<(typeof DEFAULT_TAGS)[number]>;
type DefaultTagsHolder = StringListToInterfaceKey<typeof DEFAULT_TAGS>;
declare const EMBEDDED_LANGUAGE_IDENTIFIERS: "embeddedNginxIdentifiers";
declare const EMBEDDED_LANGUAGE_COMMENTS: "embeddedNginxComments";
declare const EMBEDDED_LANGUAGE_TAGS: "embeddedNginxTags";
export declare const options: {
    readonly embeddedNginxIdentifiers: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: ["nginx"];
        }];
        readonly description: "Tag or comment identifiers that make their subsequent template literals be identified as embedded NGINX language. This option requires the `prettier-plugin-nginx` plugin.";
        readonly deprecated: "Please use `embeddedNginxComments` or `embeddedNginxTags`.";
    };
    readonly embeddedNginxComments: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Block comments that make their subsequent template literals be identified as embedded NGINX language. This option requires the `prettier-plugin-nginx` plugin.";
    };
    readonly embeddedNginxTags: {
        readonly category: "Embed";
        readonly type: "string";
        readonly array: true;
        readonly default: [{
            readonly value: [];
        }];
        readonly description: "Tags that make their subsequent template literals be identified as embedded NGINX language. This option requires the `prettier-plugin-nginx` plugin.";
    };
};
type Options = typeof options;
declare module "../types.js" {
    interface EmbeddedOptions extends Options {
    }
    interface EmbeddedDefaultCommentsHolder extends DefaultCommentsHolder {
    }
    interface EmbeddedDefaultTagsHolder extends DefaultTagsHolder {
    }
    interface PluginEmbedOptions {
        /**
         * @deprecated Please use `embeddedNginxComments` or `embeddedNginxTags`.
         */
        [EMBEDDED_LANGUAGE_IDENTIFIERS]?: (Comments[number] | Tags[number])[];
        [EMBEDDED_LANGUAGE_COMMENTS]?: Comments;
        [EMBEDDED_LANGUAGE_TAGS]?: Tags;
    }
}
export {};
