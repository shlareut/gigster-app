"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnectionManager = void 0;
const postgres_1 = __importDefault(require("postgres"));
const ts_pattern_1 = require("ts-pattern");
const check_sql_utils_1 = require("../rules/check-sql.utils");
const fp_ts_1 = require("./fp-ts");
const pg_utils_1 = require("./pg.utils");
function createConnectionManager() {
    const connectionMap = new Map();
    return {
        getOrCreate: (databaseUrl) => getOrCreateConnection(databaseUrl, connectionMap),
        close: (params) => closeConnection(params, connectionMap),
    };
}
exports.createConnectionManager = createConnectionManager;
function getOrCreateConnection(databaseUrl, connectionMap) {
    return (0, fp_ts_1.pipe)(fp_ts_1.O.fromNullable(connectionMap.get(databaseUrl)), fp_ts_1.O.foldW(() => {
        const sql = (0, postgres_1.default)(databaseUrl);
        connectionMap.set(databaseUrl, sql);
        return { sql, databaseUrl, isFirst: true };
    }, (sql) => ({ sql, databaseUrl, isFirst: false })));
}
function closeConnection(params, connectionMap) {
    const { connection, projectDir } = params;
    const strategy = (0, check_sql_utils_1.getConnectionStartegyByRuleOptionConnection)({ connection, projectDir });
    (0, ts_pattern_1.match)(strategy)
        .with({ type: "databaseUrl" }, ({ databaseUrl }) => {
        const sql = connectionMap.get(databaseUrl);
        if (sql) {
            sql.end();
            connectionMap.delete(databaseUrl);
        }
    })
        .with({ type: "migrations" }, ({ connectionUrl, databaseName }) => {
        const connectionOptions = Object.assign(Object.assign({}, (0, pg_utils_1.parseConnection)(connectionUrl)), { database: databaseName });
        const databaseUrl = (0, pg_utils_1.mapConnectionOptionsToString)(connectionOptions);
        const sql = connectionMap.get(databaseUrl);
        if (sql) {
            sql.end();
            connectionMap.delete(databaseUrl);
        }
    })
        .exhaustive();
}
//# sourceMappingURL=connection-manager.js.map