"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenRelationsWithJoinsMap = exports.getRelationsWithJoins = void 0;
function getRelationsWithJoins(parsed) {
    var _a, _b;
    const results = new Map();
    const stmt = parsed.stmts[0];
    if (stmt === undefined || ((_b = (_a = stmt === null || stmt === void 0 ? void 0 : stmt.stmt) === null || _a === void 0 ? void 0 : _a.SelectStmt) === null || _b === void 0 ? void 0 : _b.fromClause) === undefined) {
        return results;
    }
    for (const fromClause of stmt.stmt.SelectStmt.fromClause) {
        if (fromClause.JoinExpr !== undefined) {
            const { relName, joins } = recursiveTraverseJoins([], fromClause.JoinExpr);
            results.set(relName, joins);
        }
    }
    return results;
}
exports.getRelationsWithJoins = getRelationsWithJoins;
function recursiveTraverseJoins(joins, joinExpr) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const joinName = (_c = (_b = (_a = joinExpr.rarg) === null || _a === void 0 ? void 0 : _a.RangeVar) === null || _b === void 0 ? void 0 : _b.relname) !== null && _c !== void 0 ? _c : (_f = (_e = (_d = joinExpr.rarg) === null || _d === void 0 ? void 0 : _d.RangeSubselect) === null || _e === void 0 ? void 0 : _e.alias) === null || _f === void 0 ? void 0 : _f.aliasname;
    if (joinName === undefined) {
        throw new Error("joinName is undefined");
    }
    const join = { type: joinExpr.jointype, name: joinName };
    if (((_g = joinExpr.larg) === null || _g === void 0 ? void 0 : _g.JoinExpr) !== undefined) {
        return recursiveTraverseJoins([join, ...joins], (_h = joinExpr.larg) === null || _h === void 0 ? void 0 : _h.JoinExpr);
    }
    if (((_j = joinExpr.rarg) === null || _j === void 0 ? void 0 : _j.JoinExpr) !== undefined) {
        return recursiveTraverseJoins([join, ...joins], (_k = joinExpr.rarg) === null || _k === void 0 ? void 0 : _k.JoinExpr);
    }
    const relName = (_o = (_m = (_l = joinExpr.larg) === null || _l === void 0 ? void 0 : _l.RangeVar) === null || _m === void 0 ? void 0 : _m.relname) !== null && _o !== void 0 ? _o : (_q = (_p = joinExpr.rarg) === null || _p === void 0 ? void 0 : _p.RangeVar) === null || _q === void 0 ? void 0 : _q.relname;
    if (relName === undefined) {
        throw new Error("relName is undefined");
    }
    return { relName, joins: [join, ...joins] };
}
function flattenRelationsWithJoinsMap(relationsWithJoinsMap) {
    const result = [];
    relationsWithJoinsMap.forEach((joins, relName) => {
        joins.forEach((join) => {
            result.push({ relName, joinType: join.type, joinRelName: join.name });
        });
    });
    return result;
}
exports.flattenRelationsWithJoinsMap = flattenRelationsWithJoinsMap;
//# sourceMappingURL=get-relations-with-joins.js.map