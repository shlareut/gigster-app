declare const _default: {
    "check-sql": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"error" | "typeInferenceFailed" | "invalidQuery" | "missingTypeAnnotations" | "incorrectTypeAnnotations" | "invalidTypeAnnotations", ({
        connections: ({
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            migrationsDir: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
            connectionUrl?: string | undefined;
            databaseName?: string | undefined;
            watchMode?: boolean | undefined;
        } | {
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            databaseUrl: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
        } | ({
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            migrationsDir: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
            connectionUrl?: string | undefined;
            databaseName?: string | undefined;
            watchMode?: boolean | undefined;
        } | {
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            databaseUrl: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
        })[]) & ({
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            migrationsDir: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
            connectionUrl?: string | undefined;
            databaseName?: string | undefined;
            watchMode?: boolean | undefined;
        } | {
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            databaseUrl: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
        } | ({
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            migrationsDir: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
            connectionUrl?: string | undefined;
            databaseName?: string | undefined;
            watchMode?: boolean | undefined;
        } | {
            targets: ({
                wrapper: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            } | {
                tag: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                transform?: string | (string | [string, string])[] | undefined;
                fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
                skipTypeAnnotations?: boolean | undefined;
            })[];
            databaseUrl: string;
            keepAlive?: boolean | undefined;
            overrides?: {
                types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }>> | Record<string, string | {
                    parameter: (string | {
                        regex: string;
                    }) & (string | {
                        regex: string;
                    } | undefined);
                    return: string;
                }> | undefined;
            } | undefined;
            nullAsUndefined?: boolean | undefined;
            nullAsOptional?: boolean | undefined;
        })[] | undefined);
    } | {
        useConfigFile: boolean;
    })[], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
export default _default;
