import { GenerateResult } from "@ts-safeql/generate";
import { DuplicateColumnsError, InvalidMigrationError, InvalidMigrationsPathError, InvalidQueryError, PostgresError } from "@ts-safeql/shared";
import { TSESTree } from "@typescript-eslint/utils";
import { Sql } from "postgres";
import { z } from "zod";
import { TE } from "../utils/fp-ts";
import { RuleContext, RuleOptionConnection, zConnectionMigration } from "./check-sql.rule";
import { WorkerError } from "./check-sql.worker";
type TypeReplacerString = string;
type TypeReplacerFromTo = [string, string];
export type TypeTransformer = TypeReplacerString | (TypeReplacerString | TypeReplacerFromTo)[];
export declare const DEFAULT_CONNECTION_URL = "postgres://postgres:postgres@localhost:5432/postgres";
export declare function transformTypes(typeString: string | null, transform: TypeTransformer): string | null;
/**
 * Takes a generated result and a transform type and returns a result with the
 * transformed type.
 *
 * @param transform could be either:
 *  - a string that has {type} in it,
 *  - an array of tuples that behave as [valueToBeReplaced, typeToReplaceWith]
 *  - an array that has a mix of the above (such as ["{type}[]", ["colname", "x_colname"]])
 */
export declare function withTransformType(result: GenerateResult, transform?: TypeTransformer): {
    resultAsString: string | null;
    result: [string, string][] | null;
    stmt: import("postgres").Statement;
    query: string;
};
export declare function reportInvalidQueryError(params: {
    context: RuleContext;
    error: InvalidQueryError;
}): void;
export declare function reportBaseError(params: {
    context: RuleContext;
    tag: TSESTree.TaggedTemplateExpression;
    error: WorkerError;
}): void;
export declare function reportDuplicateColumns(params: {
    tag: TSESTree.TaggedTemplateExpression;
    context: RuleContext;
    error: DuplicateColumnsError;
}): void;
export declare function reportPostgresError(params: {
    context: RuleContext;
    tag: TSESTree.TaggedTemplateExpression;
    error: PostgresError;
}): void;
export declare function reportMissingTypeAnnotations(params: {
    context: RuleContext;
    tag: TSESTree.TaggedTemplateExpression;
    baseNode: TSESTree.BaseNode;
    actual: string;
}): void;
export declare function reportIncorrectTypeAnnotations(params: {
    context: RuleContext;
    typeParameter: TSESTree.TSTypeParameterInstantiation;
    expected: string | null;
    actual: string | null;
}): void;
export declare function reportInvalidTypeAnnotations(params: {
    context: RuleContext;
    typeParameter: TSESTree.TSTypeParameterInstantiation;
}): void;
export declare function getDatabaseName(params: {
    databaseName: string | undefined;
    migrationsDir: string;
    projectDir: string;
}): string;
export declare function shouldLintFile(params: RuleContext): boolean;
export declare function isWatchMigrationsDirEnabled(connection: RuleOptionConnection): connection is RuleOptionConnection & z.infer<typeof zConnectionMigration> & {
    watchMode: true;
};
export declare function getMigrationDatabaseMetadata(params: {
    connectionUrl: string;
    databaseName: string;
}): {
    databaseUrl: string;
    connectionOptions: {
        database: string;
        host: string;
        port: number;
        user: string;
        password: string;
    };
};
type ConnectionStrategy = {
    type: "databaseUrl";
    databaseUrl: string;
} | {
    type: "migrations";
    migrationsDir: string;
    connectionUrl: string;
    databaseName: string;
    watchMode: boolean;
};
export declare function getConnectionStartegyByRuleOptionConnection(params: {
    connection: RuleOptionConnection;
    projectDir: string;
}): ConnectionStrategy;
export interface ConnectionPayload {
    sql: Sql;
    databaseUrl: string;
    isFirst: boolean;
}
export declare function runMigrations(params: {
    migrationsPath: string;
    sql: Sql;
}): TE.TaskEither<InvalidMigrationsPathError | InvalidMigrationError, readonly import("postgres").RowList<(import("postgres").Row & Iterable<import("postgres").Row>)[]>[]>;
export declare function arrayEntriesToTsTypeString(entries: [string, string][] | null): string | null;
export {};
