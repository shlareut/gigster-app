import { TSESLint } from "@typescript-eslint/utils";
import z from "zod";
declare const messages: {
    typeInferenceFailed: string;
    error: string;
    invalidQuery: string;
    missingTypeAnnotations: string;
    incorrectTypeAnnotations: string;
    invalidTypeAnnotations: string;
};
export type RuleMessage = keyof typeof messages;
/**
 * A target that acts as a wrapper for the query. For example:
 *
 * ```ts
 * const query = conn.query(sql`SELECT * FROM users`);
 *               ^^^^^^^^^^ wrapper
 * ```
 */
declare const zWrapperTarget: z.ZodObject<{
    wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
        regex: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        regex: string;
    }, {
        regex: string;
    }>]>;
    transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
    fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
    skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    wrapper: (string | {
        regex: string;
    }) & (string | {
        regex: string;
    } | undefined);
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    skipTypeAnnotations?: boolean | undefined;
}, {
    wrapper: (string | {
        regex: string;
    }) & (string | {
        regex: string;
    } | undefined);
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    skipTypeAnnotations?: boolean | undefined;
}>;
type WrapperTarget = z.infer<typeof zWrapperTarget>;
/**
 * A target that is a tag expression. For example:
 *
 * ```ts
 * const query = sql`SELECT * FROM users`;
 *               ^^^ tag
 * ```
 */
declare const zTagTarget: z.ZodObject<{
    tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
        regex: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        regex: string;
    }, {
        regex: string;
    }>]>;
    transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
    fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
    skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    tag: (string | {
        regex: string;
    }) & (string | {
        regex: string;
    } | undefined);
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    skipTypeAnnotations?: boolean | undefined;
}, {
    tag: (string | {
        regex: string;
    }) & (string | {
        regex: string;
    } | undefined);
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    skipTypeAnnotations?: boolean | undefined;
}>;
type TagTarget = z.infer<typeof zTagTarget>;
export type ConnectionTarget = WrapperTarget | TagTarget;
export declare const zConnectionMigration: z.ZodObject<{
    /**
     * The path where the migration files are located.
     */
    migrationsDir: z.ZodString;
    /**
     * THIS IS NOT THE PRODUCTION DATABASE.
     *
     * A connection url to the database.
     * This is required since in order to run the migrations, a connection to postgres is required.
     * Will be used only to create and drop the shadow database (see `databaseName`).
     */
    connectionUrl: z.ZodOptional<z.ZodString>;
    /**
     * The name of the shadow database that will be created from the migration files.
     */
    databaseName: z.ZodOptional<z.ZodString>;
    /**
     * Whether or not should refresh the shadow database when the migration files change.
     */
    watchMode: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    migrationsDir: string;
    connectionUrl?: string | undefined;
    databaseName?: string | undefined;
    watchMode?: boolean | undefined;
}, {
    migrationsDir: string;
    connectionUrl?: string | undefined;
    databaseName?: string | undefined;
    watchMode?: boolean | undefined;
}>;
declare const zRuleOptionConnection: z.ZodUnion<[z.ZodObject<{
    targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
            regex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            regex: string;
        }, {
            regex: string;
        }>]>;
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }, {
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }>, z.ZodObject<{
        tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
            regex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            regex: string;
        }, {
            regex: string;
        }>]>;
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }, {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }>]>, "many">;
    keepAlive: z.ZodOptional<z.ZodBoolean>;
    overrides: z.ZodOptional<z.ZodObject<{
        types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
            parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            return: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
            parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            return: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>]>>]>>;
    }, "strip", z.ZodTypeAny, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    }, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    }>>;
    nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
    nullAsOptional: z.ZodOptional<z.ZodBoolean>;
    migrationsDir: z.ZodString;
    connectionUrl: z.ZodOptional<z.ZodString>;
    databaseName: z.ZodOptional<z.ZodString>;
    watchMode: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    targets: ({
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    } | {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    })[];
    migrationsDir: string;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    } | undefined;
    nullAsUndefined?: boolean | undefined;
    nullAsOptional?: boolean | undefined;
    connectionUrl?: string | undefined;
    databaseName?: string | undefined;
    watchMode?: boolean | undefined;
}, {
    targets: ({
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    } | {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    })[];
    migrationsDir: string;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    } | undefined;
    nullAsUndefined?: boolean | undefined;
    nullAsOptional?: boolean | undefined;
    connectionUrl?: string | undefined;
    databaseName?: string | undefined;
    watchMode?: boolean | undefined;
}>, z.ZodObject<{
    targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
            regex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            regex: string;
        }, {
            regex: string;
        }>]>;
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }, {
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }>, z.ZodObject<{
        tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
            regex: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            regex: string;
        }, {
            regex: string;
        }>]>;
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }, {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    }>]>, "many">;
    keepAlive: z.ZodOptional<z.ZodBoolean>;
    overrides: z.ZodOptional<z.ZodObject<{
        types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
            parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            return: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
            parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            return: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }, {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>]>>]>>;
    }, "strip", z.ZodTypeAny, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    }, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    }>>;
    nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
    nullAsOptional: z.ZodOptional<z.ZodBoolean>;
    databaseUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    targets: ({
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    } | {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    })[];
    databaseUrl: string;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    } | undefined;
    nullAsUndefined?: boolean | undefined;
    nullAsOptional?: boolean | undefined;
}, {
    targets: ({
        wrapper: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    } | {
        tag: (string | {
            regex: string;
        }) & (string | {
            regex: string;
        } | undefined);
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        skipTypeAnnotations?: boolean | undefined;
    })[];
    databaseUrl: string;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }>> | Record<string, string | {
            parameter: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            return: string;
        }> | undefined;
    } | undefined;
    nullAsUndefined?: boolean | undefined;
    nullAsOptional?: boolean | undefined;
}>]>;
export type RuleOptionConnection = z.infer<typeof zRuleOptionConnection>;
export declare const zConfig: z.ZodObject<{
    connections: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        migrationsDir: z.ZodString;
        connectionUrl: z.ZodOptional<z.ZodString>;
        databaseName: z.ZodOptional<z.ZodString>;
        watchMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }>, z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        databaseUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }>]>, "many">, z.ZodUnion<[z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        migrationsDir: z.ZodString;
        connectionUrl: z.ZodOptional<z.ZodString>;
        databaseName: z.ZodOptional<z.ZodString>;
        watchMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }>, z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        databaseUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }>]>]>;
}, "strip", z.ZodTypeAny, {
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
}, {
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
}>;
export type Config = z.infer<typeof zConfig>;
export declare const UserConfigFile: z.ZodObject<{
    useConfigFile: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    useConfigFile: boolean;
}, {
    useConfigFile: boolean;
}>;
export type UserConfigFile = z.infer<typeof UserConfigFile>;
export declare const Options: z.ZodUnion<[z.ZodObject<{
    connections: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        migrationsDir: z.ZodString;
        connectionUrl: z.ZodOptional<z.ZodString>;
        databaseName: z.ZodOptional<z.ZodString>;
        watchMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }>, z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        databaseUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }>]>, "many">, z.ZodUnion<[z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        migrationsDir: z.ZodString;
        connectionUrl: z.ZodOptional<z.ZodString>;
        databaseName: z.ZodOptional<z.ZodString>;
        watchMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }>, z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        databaseUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }>]>]>;
}, "strip", z.ZodTypeAny, {
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
}, {
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
}>, z.ZodObject<{
    useConfigFile: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    useConfigFile: boolean;
}, {
    useConfigFile: boolean;
}>]>;
export type Options = z.infer<typeof Options>;
export declare const RuleOptions: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    connections: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        migrationsDir: z.ZodString;
        connectionUrl: z.ZodOptional<z.ZodString>;
        databaseName: z.ZodOptional<z.ZodString>;
        watchMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }>, z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        databaseUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }>]>, "many">, z.ZodUnion<[z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        migrationsDir: z.ZodString;
        connectionUrl: z.ZodOptional<z.ZodString>;
        databaseName: z.ZodOptional<z.ZodString>;
        watchMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    }>, z.ZodObject<{
        targets: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            wrapper: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>, z.ZodObject<{
            tag: z.ZodUnion<[z.ZodString, z.ZodObject<{
                regex: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                regex: string;
            }, {
                regex: string;
            }>]>;
            transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
            fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
            skipTypeAnnotations: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }, {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        }>]>, "many">;
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodUnion<[z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodObject<{
                parameter: z.ZodUnion<[z.ZodString, z.ZodObject<{
                    regex: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    regex: string;
                }, {
                    regex: string;
                }>]>;
                return: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }, {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>]>>]>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        }>>;
        nullAsUndefined: z.ZodOptional<z.ZodBoolean>;
        nullAsOptional: z.ZodOptional<z.ZodBoolean>;
        databaseUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }, {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    }>]>]>;
}, "strip", z.ZodTypeAny, {
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
}, {
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
}>, z.ZodObject<{
    useConfigFile: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    useConfigFile: boolean;
}, {
    useConfigFile: boolean;
}>]>, "many">;
export type RuleOptions = z.infer<typeof RuleOptions>;
export type RuleContext = Readonly<TSESLint.RuleContext<RuleMessage, RuleOptions>>;
declare const _default: TSESLint.RuleModule<"error" | "typeInferenceFailed" | "invalidQuery" | "missingTypeAnnotations" | "incorrectTypeAnnotations" | "invalidTypeAnnotations", ({
    connections: ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[]) & ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    } | ({
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        migrationsDir: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
        connectionUrl?: string | undefined;
        databaseName?: string | undefined;
        watchMode?: boolean | undefined;
    } | {
        targets: ({
            wrapper: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        } | {
            tag: (string | {
                regex: string;
            }) & (string | {
                regex: string;
            } | undefined);
            transform?: string | (string | [string, string])[] | undefined;
            fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
            skipTypeAnnotations?: boolean | undefined;
        })[];
        databaseUrl: string;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "int2" | "int4" | "int8" | "smallint" | "int" | "real" | "float4" | "float" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "text" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "date" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }>> | Record<string, string | {
                parameter: (string | {
                    regex: string;
                }) & (string | {
                    regex: string;
                } | undefined);
                return: string;
            }> | undefined;
        } | undefined;
        nullAsUndefined?: boolean | undefined;
        nullAsOptional?: boolean | undefined;
    })[] | undefined);
} | {
    useConfigFile: boolean;
})[], TSESLint.RuleListener>;
export default _default;
